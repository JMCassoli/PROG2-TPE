package TPE;

import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;

public class ListaVinculada<T> implements Iterable<T> {

	private Nodo<T> primerNodo;
	private Comparator<T> orden;
	private int size;

	public ListaVinculada() {
		this.primerNodo = null;
		this.orden = null;
		this.size = 0;

	}

	public void insertarOrdenado(T nuevoValor) {
		this.size++;
		Nodo<T> nuevo = new Nodo(nuevoValor);
		if(this.primerNodo==null) {
			this.primerNodo= nuevo;
		} else {
			
			Nodo<T> nodoAnterior = null;
			Nodo<T> aux = this.primerNodo;
			while(aux!=null && orden.compare(nuevoValor, aux.getValor()) > 0) {
				nodoAnterior = aux;
				aux = aux.getSiguienteNodo();
			}
			if(aux == null) {
				nodoAnterior.setSiguienteNodo(nuevo);
			} else {
				nuevo.setSiguienteNodo(aux);
				if(aux == this.primerNodo) {
					this.primerNodo=nuevo;
				} else {
					nodoAnterior.setSiguienteNodo(nuevo);
				}
			}
			
		}
	}

	public void mostrarLista() {
		IteradorNodo<T> it = new IteradorNodo<T>(this.primerNodo);
		while (it.hasNext()) {
			T n = it.next();
			System.out.println(n);
		}
	}

	public void ordenarLista() {
		
		ListaVinculada<T> result = new ListaVinculada();
		result.setOrden(this.orden);
		for(T n: this) {
			result.insertarOrdenado(n);
		}
		this.primerNodo=result.primerNodo;
	}
	
	

	@Override
	public Iterator<T> iterator() {
		IteradorNodo<T> it = new IteradorNodo<T>(this.primerNodo);
		return it;
	}

	public Nodo<T> getPrimerNodo() {
		return primerNodo;
	}

	public void setPrimerNodo(Nodo<T> primerNodo) {
		this.primerNodo = primerNodo;
	}

	public void setOrden(Comparator comparador) {
		this.orden = comparador;
		if(this.primerNodo!=null) {
			this.ordenarLista();			
		}

	}

	private void reOrdenar() {
			Nodo<T> nodoAnterior=null;
			Nodo<T> raiz = this.primerNodo;
			Nodo<T> siguiente = this.primerNodo.getSiguienteNodo();
					
			
	for(int i = 0; i < this.getSize()-1; i++) {
		//System.out.println(this.orden.compare(raiz.getValor(), siguiente.getValor()) > 0);
				if(siguiente !=null && this.orden.compare(raiz.getValor(), siguiente.getValor()) > 0) {
					System.out.println("anterior : "+ nodoAnterior);
					System.out.println("raiz : "+ raiz);
					System.out.println("siguiente : "+ siguiente);
					if (nodoAnterior == null) {
						Nodo<T> aux = new Nodo<T> (siguiente.getValor());
						if(siguiente.getSiguienteNodo()!=null) {
							
						aux.setSiguienteNodo(siguiente.getSiguienteNodo());
						raiz.setSiguienteNodo(siguiente.getSiguienteNodo());
						siguiente.setSiguienteNodo(raiz);
						}
						nodoAnterior=siguiente;
						this.setPrimerNodo(aux);
						siguiente = raiz.getSiguienteNodo();						
				} else {
					Nodo<T> aux = new Nodo<T> (siguiente.getValor());
					if(siguiente.getSiguienteNodo()!=null) {
						
					aux.setSiguienteNodo(siguiente.getSiguienteNodo());
					raiz.setSiguienteNodo(siguiente.getSiguienteNodo());
					siguiente.setSiguienteNodo(raiz);
					}
					nodoAnterior=siguiente;
					siguiente = raiz.getSiguienteNodo();
					}
					
				} else {
					Nodo<T> aux = new Nodo<T> (raiz.getValor());
					aux.setSiguienteNodo(siguiente);
				raiz = siguiente;					
				siguiente = raiz.getSiguienteNodo();
				nodoAnterior = aux;
				}		
				
		}
			
			}
			

	public Nodo obtenerNodo(int pos){
		if(pos < 0 || pos >= this.getSize() ){
			return null;
		}
		else{
			int contador = 0;
			Nodo buscado = this.primerNodo;
				while(contador < pos){
					buscado = buscado.getSiguienteNodo();
					contador++;
				}
		return buscado;
		}
	}
	
	public int getSize() {
		return size;
	}

}