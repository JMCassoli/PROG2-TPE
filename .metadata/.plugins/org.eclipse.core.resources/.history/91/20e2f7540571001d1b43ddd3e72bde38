package TPE;

import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;

<<<<<<< HEAD
import TPE.Comparadores.ComparadorIntegers;

=======
>>>>>>> 99795a6df14794980da25547b213a936c114f1de
public class ListaVinculada<T> implements Iterable<T> {

	private Nodo<T> primerNodo;
	private Comparator<T> orden;
<<<<<<< HEAD
	private int size;

	public ListaVinculada() {
		this.primerNodo = null;
		this.orden = new ComparadorIntegers();
		this.size = 0;
=======

	public ListaVinculada() {
		this.primerNodo = null;
		this.orden = null;
>>>>>>> 99795a6df14794980da25547b213a936c114f1de

	}

	public void insertarOrdenado(T nuevoValor) {
<<<<<<< HEAD
		this.size++;
		Nodo<T> nuevo = new Nodo(nuevoValor);
		if(this.primerNodo==null) {
			this.primerNodo= nuevo;
		} else {
			
			Nodo<T> nodoAnterior = null;
			Nodo<T> aux = this.primerNodo;
			while(aux!=null && orden.compare(nuevoValor, aux.getValor()) > 0) {
				nodoAnterior = aux;
				aux = aux.getSiguienteNodo();
=======
		Nodo<T> nodoAux = new Nodo<T>(nuevoValor, null);
		IteradorNodo<T> it = new IteradorNodo<T>(this.primerNodo);
		Nodo<T> nodoanterior = null;
		Nodo<T> nodoposterior = primerNodo;
		while (true) {
			if (nodoposterior == null) {
				if (nodoanterior == null) {
					primerNodo = nodoAux;
					break;
				}
				nodoanterior.setSiguienteNodo(nodoAux);
				break;
			} else if (orden.compare(nuevoValor, nodoposterior.getValor()) > 0) {
				nodoanterior = nodoposterior;
				nodoposterior = nodoposterior.getSiguienteNodo();

			} else if (orden.compare(nuevoValor, nodoposterior.getValor()) <= 0) {
				if (nodoanterior == null) {
					nodoAux.setSiguienteNodo(primerNodo);
					primerNodo = nodoAux;
					break;
				}
				nodoanterior.setSiguienteNodo(nodoAux);
				nodoAux.setSiguienteNodo(nodoposterior);
				break;
>>>>>>> 99795a6df14794980da25547b213a936c114f1de
			}
			if(aux == null) {
				nodoAnterior.setSiguienteNodo(nuevo);
			} else {
				nuevo.setSiguienteNodo(aux);
				if(aux == this.primerNodo) {
					this.primerNodo=nuevo;
				} else {
					nodoAnterior.setSiguienteNodo(nuevo);
				}
			}
			
		}
	}
<<<<<<< HEAD
	
	public int obtenerPosicion(T valor) {
		Iterator<T> it = iterator();

		int i=0;
		for(T n : this) {
			if(n.equals(valor)) {
				return i+1;
			}
			i++;
		}
		return -1;
	}
	
	public void borrarOcurrencias(T valor) {
		Iterator<T> it = iterator();

		int i=0;
		for(T n : this) {
			if(n.equals(valor)) {
				borrar(i+1);
			} else {
				i++;
			}
		}
	}
	
	public void borrar(int pos) {
		Iterator<T> it = iterator();
		int i=0;
		while(it.hasNext() && i<pos-2 ) {
			it.next();
			i++;
		}
		if(i==0) {
			this.primerNodo = this.primerNodo.getSiguienteNodo(); 
		}else {			
		it.remove();
		}
		this.size--;
		
=======

	public void mostrarLista() {
		IteradorNodo<T> it = new IteradorNodo<T>(this.primerNodo);
		while (it.hasNext()) {
			T n = it.next();
			System.out.println(n);
		}
>>>>>>> 99795a6df14794980da25547b213a936c114f1de
	}

	public void mostrarLista() {
		Iterator<T> it = iterator();
		while (it.hasNext()) {
			T n = it.next();
			System.out.println(n);
		}
	}

	public void ordenarLista() {
		
		ListaVinculada<T> result = new ListaVinculada();
		result.setOrden(this.orden);
		for(T n: this) {
			result.insertarOrdenado(n);
		}
		this.primerNodo=result.primerNodo;
	}
	
	

	@Override
	public Iterator<T> iterator() {
		IteradorNodo<T> it = new IteradorNodo<T>(this.primerNodo);
		return it;
	}

<<<<<<< HEAD
	protected Nodo<T> getPrimerNodo() {
=======
	public Nodo<T> getPrimerNodo() {
>>>>>>> 99795a6df14794980da25547b213a936c114f1de
		return primerNodo;
	}

	public void setPrimerNodo(Nodo<T> primerNodo) {
		this.primerNodo = primerNodo;
	}

<<<<<<< HEAD
	public void setOrden(Comparator comparador) {
		this.orden = comparador;
		if(this.primerNodo!=null) {
			this.ordenarLista();			
		}

	}		

	protected Nodo obtenerNodo(int pos){
		if(pos < 0 || pos >= this.getSize() ){
			return null;
		}
		else{
			int contador = 0;
			Nodo buscado = this.primerNodo;
				while(contador < pos){
					buscado = buscado.getSiguienteNodo();
					contador++;
				}
		return buscado;
		}
	}
	
	public int getSize() {
		return size;
	}
=======
	public void setOrden(ComparadorIntegers<T> comparador) {
		this.orden = comparador;

	}
>>>>>>> 99795a6df14794980da25547b213a936c114f1de

}